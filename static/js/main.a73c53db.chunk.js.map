{"version":3,"sources":["components/Game.js","components/info/StepButton.js","components/info/Scoreboard.js","components/info/InfoPanel.js","components/bot/StateTable.js","components/bot/Machine.js","components/board/Square.js","components/board/Board.js","components/bot/WeightTable.js","index.js"],"names":["Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","state","history","squares","Array","fill","lastMove","turn","i","_this2","slice","length","determineEndCondition","player","setState","concat","toConsumableArray","square","endCondition","evaluateMachineMove","legalMoves","getLegalMoves","registerMove","status","_this3","current","react_default","a","createElement","className","Board_Board","size","onClick","InfoPanel","jumpTo","Machine_MatchboxMachine","getMachineEvaluationFunction","func","Component","keys","filter","lines","line","_lines$line","slicedToArray","b","c","some","StepButton","class","step","Scoreboard","x","o","StateTable","entries","states","rows","orderBy","e","JSON","parse","map","entry","_entry","key","moves","WeightTable","scope","MatchboxMachine","resolveMove","decisionMap","resolveEnd","stringify","objectSpread","h","hasOwnProperty","forEach","move","highestWeight","reduce","Math","max","usefulMoves","randomMove","sample","type","endType","X","O","resolveLoss","resolveWin","resolveTie","pop","every","weight","React","Square","style","position","value","Board","renderSquare","chunk","row","headers","bodies","push","floor","defaultProps","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.a73c53db.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Board, InfoPanel, Machine} from '.';\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        lastMove: null,\r\n      }],\r\n      turn: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.turn + 1);\r\n    const squares = history[history.length - 1].squares.slice();\r\n\r\n    if (determineEndCondition(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    const player = (this.state.turn % 2) === 0 ? 'X' : 'O';\r\n    squares[i] = player;\r\n    this.setState({\r\n      history: [...history, { squares: squares, lastMove: { square: i, player: player } }],\r\n      turn: history.length,\r\n    }, () => {\r\n      const endCondition = determineEndCondition(squares);\r\n      if (endCondition || player === 'X') {\r\n        this.state.evaluateMachineMove({\r\n          state: squares,\r\n          turn: this.state.turn,\r\n          legalMoves: getLegalMoves(squares),\r\n          endCondition: endCondition,\r\n          registerMove: this.handleClick\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history.slice();\r\n    const current = history[this.state.turn];\r\n    const player = ((this.state.turn % 2) === 0 ? 'X' : 'O');\r\n    const endCondition = determineEndCondition(current.squares);\r\n\r\n    let status;\r\n    if (endCondition === 'X' || endCondition === 'O') {\r\n      status = 'Winner: ' + endCondition;\r\n    } else if (endCondition === 'T') {\r\n      status = 'Tie';\r\n    } else {\r\n      status = 'Next player: ' + player;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-8\">\r\n            <Board\r\n              size='large'\r\n              squares={current.squares}\r\n              onClick={this.handleClick}\r\n            />\r\n          </div>\r\n          <div className='col-4'>\r\n            <InfoPanel\r\n              status={status}\r\n              history={history}\r\n              jumpTo={(i) => this.setState({ turn: i })}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className=\"col-12\">\r\n            <Machine\r\n              getMachineEvaluationFunction={(func) => this.setState({ evaluateMachineMove: func })}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getLegalMoves(squares) {\r\n  return Object.keys(squares).filter(i => !squares[i]);\r\n}\r\n\r\nfunction determineEndCondition(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (const line in lines) {\r\n    const [a, b, c] = lines[line];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  if (!squares.some(square => !square)) {\r\n    return 'T';\r\n  }\r\n  return false;\r\n}","import React from 'react'\r\n\r\nexport default function StepButton(props) {\r\n  return (\r\n    <button class='btn btn-primary' onClick={() => props.jumpTo(props.step)}>\r\n      {props.step > 0 ? \"Go to move \" + props.step : \"Restart game\"}\r\n    </button>\r\n  );\r\n}","import React from 'react'\r\n\r\nexport default function Scoreboard(props) {\r\n  return (\r\n    <div className='scoreboard'>\r\n      <div className=''>\r\n        <div className=''>X: {props.x || 0}</div>\r\n        <div className=''>O: {props.o || 0}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport StepButton from './StepButton';\r\nimport Scoreboard from './Scoreboard';\r\n\r\nexport default function InfoPanel(props) {\r\n\r\n  return (\r\n    <div className=\"game-info card\">\r\n      <div className='card-body'>\r\n        <h5 className='card-title'>Game Info</h5>\r\n        <Scoreboard />\r\n        <p className='card-text'>{props.status}</p>\r\n        <StepButton step={0} jumpTo={props.jumpTo}></StepButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Board, WeightTable } from '..';\r\nimport { orderBy } from 'lodash';\r\n\r\nexport default function StateTable(props) {\r\n  const entries = Object.entries(props.states);\r\n  const sortedEntries = orderBy(entries, (e) => JSON.parse(e[0]).filter(square => !square).length, 'desc');\r\n  const rows = sortedEntries.map((entry) => {\r\n    const [key, moves] = entry;\r\n    return (\r\n      <tr key={key}>\r\n        <td className='board-display'><Board squares={JSON.parse(key)} /></td>\r\n        <td className='weight-display'><WeightTable moves={moves} /></td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table className='state-table'>\r\n      <thead>\r\n        <tr>\r\n          <th scope='col' className='board-header'>Board state</th>\r\n          <th scope='col' className='weight-header'>Available moves</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{rows}</tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\n","import sample from 'lodash/sample';\r\nimport React from 'react';\r\nimport StateTable from './StateTable';\r\n\r\nexport default class MatchboxMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props.getMachineEvaluationFunction(this.resolveMove.bind(this));\r\n    this.state = {\r\n      decisionMap: {},\r\n      history: [],\r\n    }\r\n  }\r\n\r\n  resolveMove(props) {\r\n    if (props.endCondition) {\r\n      this.resolveEnd(props.endCondition);\r\n      return;\r\n    }\r\n    const state = props.state;\r\n    const key = JSON.stringify(state);\r\n    const map = {...this.state.decisionMap};\r\n    const history = this.state.history.filter(h => h.turn < props.turn);\r\n\r\n    // Check if current game state has previously been evaluated\r\n    if (!map.hasOwnProperty(key)) {\r\n      map[key] = [];\r\n      props.legalMoves.forEach(move => map[key][move] = 1)\r\n    }\r\n\r\n    // Get list of best moves. This setup allows for adjustment from winning.\r\n    const moves = map[key];\r\n    const highestWeight = moves.reduce((a, b) => Math.max(a, b));\r\n\r\n    const usefulMoves = Object.keys(moves).filter(move => moves[move] === highestWeight);\r\n    const randomMove = sample(usefulMoves);\r\n\r\n    // Store the move for this game\r\n    this.setState({\r\n      history: [...history, { state: state, move: randomMove, turn: props.turn }],\r\n      decisionMap: map\r\n    }, () => props.registerMove(randomMove));\r\n\r\n  }\r\n\r\n  resolveEnd(type) {\r\n    // translated from current tic-tac-toe endcon, will need to be refactored\r\n    const translation = {'X': 'L', 'O': 'W'}\r\n    const endType = translation[type];\r\n    if (endType === 'L') {\r\n      this.resolveLoss();\r\n    } else if (endType === 'W') {\r\n      this.resolveWin();\r\n    } else {\r\n      this.resolveTie();\r\n    }\r\n  }\r\n\r\n  resolveWin() {\r\n    const history = this.state.history.slice();\r\n    const map = {...this.state.decisionMap};\r\n    history.forEach((o) => {\r\n      map[JSON.stringify(o.state)][o.move]++;\r\n    });\r\n\r\n    this.setState({\r\n      decisionMap: map\r\n    })\r\n  }\r\n\r\n  resolveTie() {\r\n    // currently, do nothing\r\n  }\r\n\r\n  resolveLoss() {\r\n    // Set weight of last move used to 0\r\n    const map = {...this.state.decisionMap};\r\n    const history = this.state.history.slice();\r\n    let lastMove, key;\r\n    do {\r\n      lastMove = history.pop();\r\n      key = JSON.stringify(lastMove.state);\r\n      map[key][lastMove.move] = 0;\r\n    } while (map[key].every(weight => !weight));\r\n\r\n    this.setState({\r\n      decisionMap: map\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='machine'>\r\n        <div className='machine-info'>\r\n          <h1>Hi, I'm a machine!</h1>\r\n          As you play, I'll get better at this game.\r\n          Below, you can see the choices I'm making each time you make a move.\r\n          The numbers represent which moves are the best to make. \r\n          I'll always pick the highest number from the list.\r\n        </div>\r\n        <StateTable states={this.state.decisionMap} />\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\n\r\nexport default function Square(props) {\r\n  const style = props.position % 2 \r\n  ? 'even-square-' + props.size \r\n  : 'odd-square-' + props.size;\r\n  \r\n  return (\r\n    <div className={style} onClick={props.onClick}>\r\n      {props.value}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport Square from './Square';\r\nimport { chunk } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Board extends React.Component {\r\n\r\n  static propTypes = {\r\n    squares: PropTypes.array.isRequired,\r\n    onClick: PropTypes.func,\r\n    size: PropTypes.string\r\n  }\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n    size: 'small'\r\n  }\r\n  \r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        position={i}\r\n        size={this.props.size}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const squares = this.props.squares.map((square, i) => this.renderSquare(i));\r\n    const rows = chunk(squares, 3).map((row, i) => <div key={i} className=\"board-row\">{row}</div>);\r\n\r\n    return (\r\n      <div className=\"game-board\">\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default function WeightTable(props) {\r\n  const headers = [];\r\n  const bodies = [];\r\n\r\n  props.moves.forEach((weight, move) => {\r\n    headers.push(\r\n      <th key={10 - move}>({Math.floor(move / 3)},{move % 3})</th>\r\n    );\r\n    bodies.push(\r\n      <td key={move} className={weight ? 'alert-success' : 'alert-danger'}>{weight}</td>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <table class='weight-table'>\r\n      <thead class='thead-light'><tr>{headers}</tr></thead>\r\n      <tbody><tr>{bodies}</tr></tbody>\r\n    </table>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./styles/index.scss\";\r\nimport {Game} from './components'\r\n// ========================================\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}