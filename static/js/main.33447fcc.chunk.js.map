{"version":3,"sources":["components/Square.js","components/Board.js","components/StepButton.js","components/InfoPanel.js","bot/Machine.js","components/Game.js","components/index.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","key","squares","_this2","map","square","renderSquare","rows","chunk","row","React","Component","StepButton","class","jumpTo","step","InfoPanel","status","defaultProps","MatchboxMachine","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getMachineEvaluationFunction","resolveMove","bind","assertThisInitialized","state","stateMap","Map","history","endCondition","resolveEnd","JSON","stringify","slice","turn","has","weightMap","legalMoves","forEach","move","set","availableMoves","get","usefulMoves","weight","push","randomMove","sample","setState","registerMove","type","resolveLoss","resolveWin","resolveTie","lastMove","pop","every","moves","Board_Board","parse","renderWeightTable","headers","bodies","Math","floor","renderMatchboxes","getLegalMoves","mark","determineEndCondition","lines","line","_lines$line","slicedToArray","b","c","some","Game","handleClick","Array","fill","length","player","concat","toConsumableArray","evaluateMachineMove","_this3","current","Machine_MatchboxMachine","func","ReactDOM","render","components","document","getElementById"],"mappings":"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","file":"static/js/main.33447fcc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Square (props) {\r\n  return (\r\n    <td className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </td>\r\n  )\r\n}","import React from 'react';\r\nimport Square from './Square';\r\nimport { chunk } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Board extends React.Component {\r\n\r\n  static propTypes = {\r\n    squares: PropTypes.array.isRequired,\r\n    onClick: PropTypes.func\r\n  }\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n  }\r\n  \r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const squares = this.props.squares.map((square, i) => this.renderSquare(i));\r\n    const rows = chunk(squares, 3).map((row, i) => <tr key={i} className=\"board-row\">{row}</tr>);\r\n\r\n    return (\r\n      <table className=\"game-board\">\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}","import React from 'react'\r\n\r\nexport default function StepButton(props) {\r\n  return (\r\n    <button class='btn btn-primary' onClick={() => props.jumpTo(props.step)}>\r\n      {props.step > 0 ? \"Go to move \" + props.step : \"Restart game\"}\r\n    </button>\r\n  );\r\n}","import React from 'react';\r\nimport StepButton from './StepButton';\r\n\r\nexport default function InfoPanel(props) {\r\n  // const moveList = props.history.map((step, i) =>\r\n  //   <StepButton\r\n  //     key={i}\r\n  //     step={i}\r\n  //     jumpTo={() => props.jumpTo(i)}\r\n  //   />\r\n  // );\r\n\r\n  return (\r\n    <div className=\"game-info\">\r\n      <div>{props.status}</div>\r\n      <StepButton step={0} jumpTo={props.jumpTo}></StepButton>\r\n    </div>\r\n  );\r\n}\r\n","import sample from 'lodash/sample';\r\nimport React from 'react';\r\nimport Board from '../components/Board'\r\n\r\nexport default class MatchboxMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props.getMachineEvaluationFunction(this.resolveMove.bind(this));\r\n    this.state = {\r\n      stateMap: new Map(),\r\n      history: [],\r\n    }\r\n  }\r\n\r\n  resolveMove(props) {\r\n    if (props.endCondition) {\r\n      this.resolveEnd(props.endCondition);\r\n      return;\r\n    }\r\n    const state = props.state;\r\n    const key = JSON.stringify(state);\r\n    const map = this.state.stateMap;\r\n    const history = this.state.history.slice(0, props.turn + 1);\r\n\r\n    // Check if current game state has previously been evaluated\r\n    if (!map.has(key)) {\r\n      const weightMap = [];\r\n      props.legalMoves.forEach((move) => weightMap[move] = 1);\r\n      map.set(key, weightMap);\r\n    }\r\n\r\n    // Get list of available moves that haven't been 'marked off'\r\n    const availableMoves = map.get(key);\r\n\r\n    const usefulMoves = [];\r\n    availableMoves.forEach((weight, move) => {\r\n      if (weight > 0) usefulMoves.push(move);\r\n    })\r\n    const randomMove = sample(usefulMoves);\r\n\r\n    // Store the move for this game\r\n    history[props.turn] = { state: state, move: randomMove };\r\n    this.setState({\r\n      history: history,\r\n    });\r\n\r\n    // Register the move with the game\r\n    props.registerMove(randomMove);\r\n  }\r\n\r\n  resolveEnd(type) {\r\n    if (type === 'X') {\r\n      this.resolveLoss();\r\n    } else if (type === 'O') {\r\n      this.resolveWin();\r\n    } else {\r\n      this.resolveTie();\r\n    }\r\n  }\r\n\r\n  resolveWin() {\r\n    // currently, do nothing\r\n  }\r\n\r\n  resolveTie() {\r\n    // currently, do nothing\r\n  }\r\n\r\n  resolveLoss() {\r\n    // Set weight of last move used to 0\r\n    const lastMove = this.state.history.slice().pop();\r\n    const map = this.state.stateMap;\r\n    const key = JSON.stringify(lastMove.state);\r\n    const availableMoves = map.get(key).slice();\r\n    availableMoves[lastMove.move] = 0;\r\n    map.set(key, availableMoves);\r\n    if (availableMoves.every(weight => !weight)) {\r\n      this.resolveLoss();\r\n    }\r\n  }\r\n\r\n  renderMatchboxes() {\r\n    const rows = [];\r\n    this.state.stateMap.forEach((moves, key) => {\r\n      rows.push(\r\n        <tr key={key}>\r\n          <td><Board squares={JSON.parse(key)}/></td><td>{this.renderWeightTable(moves)}</td>\r\n        </tr>\r\n      );\r\n    });\r\n    return rows;\r\n  }\r\n\r\n  renderWeightTable(moves) {\r\n    const headers = [];\r\n    const bodies = [];\r\n    moves.forEach((weight, move) => {\r\n      headers.push(\r\n        <th key={move}>({Math.floor(move/3)},{move%3})</th>\r\n      );\r\n      bodies.push(\r\n        <td key={move} class={weight ? 'alert alert-success' : 'alert alert-danger'}>{weight}</td>\r\n      )\r\n    });\r\n    return (\r\n      <table class='table table-bordered text-center'>\r\n        <thead class='thead-light'><tr>{headers}</tr></thead>\r\n        <tbody><tr>{bodies}</tr></tbody>\r\n      </table>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='machine'>\r\n        <div className='machine-info'>\r\n          <h1>Hi, I'm a machine!</h1>\r\n          As you play, I'll get better at this game.\r\n          Below, you can see the choices I'm making each time you make a move.\r\n        </div>\r\n        <table className='matchboxes'>\r\n          {this.renderMatchboxes()}\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport InfoPanel from './InfoPanel';\r\nimport MatchboxMachine from '../bot/Machine';\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        lastMove: null,\r\n      }],\r\n      turn: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.turn + 1);\r\n    const squares = history[history.length - 1].squares.slice();\r\n\r\n    if (determineEndCondition(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    const player = (this.state.turn % 2) === 0 ? 'X' : 'O';\r\n    squares[i] = player;\r\n    this.setState({\r\n      history: [...history, { squares: squares, lastMove: { square: i, player: player } }],\r\n      turn: history.length,\r\n    }, () => {\r\n      if (player === 'X') {\r\n        this.state.evaluateMachineMove({\r\n          state: squares,\r\n          turn: this.state.turn,\r\n          legalMoves: getLegalMoves(squares),\r\n          endCondition: determineEndCondition(squares),\r\n          registerMove: this.handleClick\r\n        })\r\n      }\r\n    });\r\n\r\n    // Allow machine to respond\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history.slice();\r\n    const current = history[this.state.turn];\r\n    const player = ((this.state.turn % 2) === 0 ? 'X' : 'O');\r\n    const endCondition = determineEndCondition(current.squares);\r\n\r\n    let status;\r\n    if (endCondition === 'X' || endCondition === 'O') {\r\n      status = 'Winner: ' + endCondition;\r\n    } else if (endCondition === 'T') {\r\n      status = 'Tie';\r\n    } else {\r\n      status = 'Next player: ' + player;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={this.handleClick}\r\n        />\r\n        <InfoPanel\r\n          status={status}\r\n          history={history}\r\n          jumpTo={(i) => this.setState({ turn: i })}\r\n        />\r\n        <MatchboxMachine\r\n          getMachineEvaluationFunction={(func) => this.setState({ evaluateMachineMove: func })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getLegalMoves(squares) {\r\n  const legalMoves = [];\r\n  squares.forEach((mark, i) => {\r\n    if (!mark) legalMoves.push(i);\r\n  });\r\n  return legalMoves;\r\n}\r\n\r\nfunction determineEndCondition(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (const line in lines) {\r\n    const [a, b, c] = lines[line];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  if (!squares.some(square => !square)) {\r\n    return 'T';\r\n  }\r\n  return false;\r\n}","import Game from './Game'\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Game from './components'\r\n// ========================================\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}