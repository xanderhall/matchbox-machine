{"version":3,"sources":["components/Game.js","components/info/StepButton.js","components/info/Scoreboard.js","components/info/InfoPanel.js","components/bot/StateTable.js","components/bot/Machine.js","components/board/Square.js","components/board/Board.js","components/bot/WeightTable.js","index.js"],"names":["Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","state","history","squares","Array","fill","lastMove","turn","scores","X","O","i","_this2","slice","length","determineEndCondition","player","endCondition","objectSpread","setState","concat","toConsumableArray","square","evaluateMachineMove","legalMoves","getLegalMoves","registerMove","status","_this3","current","react_default","a","createElement","className","Board_Board","size","onClick","InfoPanel","jumpTo","Machine_MatchboxMachine","getMachineEvaluationFunction","func","Component","keys","filter","lines","line","_lines$line","slicedToArray","b","c","some","StepButton","class","step","Scoreboard","StateTable","entries","states","rows","orderBy","e","JSON","parse","map","entry","_entry","key","moves","WeightTable","scope","MatchboxMachine","resolveMove","decisionMap","resolveEnd","stringify","h","hasOwnProperty","forEach","move","highestWeight","reduce","Math","max","usefulMoves","randomMove","sample","type","endType","resolveLoss","resolveWin","resolveTie","o","pop","every","weight","React","Square","style","position","value","Board","renderSquare","chunk","row","headers","bodies","push","floor","defaultProps","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.5ae99391.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Board, InfoPanel, Machine} from '.';\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        lastMove: null,\r\n      }],\r\n      turn: 0,\r\n      scores: {X: 0, O: 0}\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.turn + 1);\r\n    const squares = history[history.length - 1].squares.slice();\r\n\r\n    if (determineEndCondition(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    const player = (this.state.turn % 2) === 0 ? 'X' : 'O';\r\n    squares[i] = player;\r\n\r\n    const endCondition = determineEndCondition(squares);\r\n    const scores = {...this.state.scores};\r\n    if (endCondition) {\r\n      scores[player]++;\r\n    }\r\n    this.setState({\r\n      history: [...history, { squares: squares, lastMove: { square: i, player: player } }],\r\n      turn: history.length,\r\n      scores: scores\r\n    }, () => {\r\n      if (endCondition || player === 'X') {\r\n        this.state.evaluateMachineMove({\r\n          state: squares,\r\n          turn: this.state.turn,\r\n          legalMoves: getLegalMoves(squares),\r\n          endCondition: endCondition,\r\n          registerMove: this.handleClick\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history.slice();\r\n    const current = history[this.state.turn];\r\n    const player = ((this.state.turn % 2) === 0 ? 'X' : 'O');\r\n    const endCondition = determineEndCondition(current.squares);\r\n\r\n    let status;\r\n    if (endCondition === 'X' || endCondition === 'O') {\r\n      status = 'Winner: ' + endCondition;\r\n    } else if (endCondition === 'T') {\r\n      status = 'Tie';\r\n    } else {\r\n      status = 'Next player: ' + player;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-8\">\r\n            <Board\r\n              size='large'\r\n              squares={current.squares}\r\n              onClick={this.handleClick}\r\n            />\r\n          </div>\r\n          <div className='col-4'>\r\n            <InfoPanel\r\n              status={status}\r\n              history={history}\r\n              scores={this.state.scores}\r\n              jumpTo={(i) => this.setState({ turn: i })}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='row'>\r\n          <div className=\"col-12\">\r\n            <Machine\r\n              getMachineEvaluationFunction={(func) => this.setState({ evaluateMachineMove: func })}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getLegalMoves(squares) {\r\n  return Object.keys(squares).filter(i => !squares[i]);\r\n}\r\n\r\nfunction determineEndCondition(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (const line in lines) {\r\n    const [a, b, c] = lines[line];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  if (!squares.some(square => !square)) {\r\n    return 'T';\r\n  }\r\n  return false;\r\n}","import React from 'react'\r\n\r\nexport default function StepButton(props) {\r\n  return (\r\n    <button class='btn btn-primary' onClick={() => props.jumpTo(props.step)}>\r\n      {props.step > 0 ? \"Go to move \" + props.step : \"Restart game\"}\r\n    </button>\r\n  );\r\n}","import React from 'react'\r\n\r\nexport default function Scoreboard(props) {\r\n  return (\r\n    <div className='scoreboard'>\r\n      <div className=''>\r\n        <div className=''>X: {props.scores.X || 0}</div>\r\n        <div className=''>O: {props.scores.O || 0}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport StepButton from './StepButton';\r\nimport Scoreboard from './Scoreboard';\r\n\r\nexport default function InfoPanel(props) {\r\n\r\n  return (\r\n    <div className=\"game-info card\">\r\n      <div className='card-body'>\r\n        <h5 className='card-title'>Game Info</h5>\r\n        <Scoreboard scores={props.scores}/>\r\n        <p className='card-text'>{props.status}</p>\r\n        <StepButton step={0} jumpTo={props.jumpTo}></StepButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Board, WeightTable } from '..';\r\nimport { orderBy } from 'lodash';\r\n\r\nexport default function StateTable(props) {\r\n  const entries = Object.entries(props.states);\r\n  const sortedEntries = orderBy(entries, (e) => JSON.parse(e[0]).filter(square => !square).length, 'desc');\r\n  const rows = sortedEntries.map((entry) => {\r\n    const [key, moves] = entry;\r\n    return (\r\n      <tr key={key}>\r\n        <td className='board-display'><Board squares={JSON.parse(key)} /></td>\r\n        <td className='weight-display'><WeightTable moves={moves} /></td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <table className='state-table'>\r\n      <thead>\r\n        <tr>\r\n          <th scope='col' className='board-header'>Board state</th>\r\n          <th scope='col' className='weight-header'>Available moves</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>{rows}</tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\n","import sample from 'lodash/sample';\r\nimport React from 'react';\r\nimport StateTable from './StateTable';\r\n\r\nexport default class MatchboxMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props.getMachineEvaluationFunction(this.resolveMove.bind(this));\r\n    this.state = {\r\n      decisionMap: {},\r\n      history: [],\r\n    }\r\n  }\r\n\r\n  resolveMove(props) {\r\n    if (props.endCondition) {\r\n      this.resolveEnd(props.endCondition);\r\n      return;\r\n    }\r\n    const state = props.state;\r\n    const key = JSON.stringify(state);\r\n    const map = {...this.state.decisionMap};\r\n    const history = this.state.history.filter(h => h.turn < props.turn);\r\n\r\n    // Check if current game state has previously been evaluated\r\n    if (!map.hasOwnProperty(key)) {\r\n      map[key] = [];\r\n      props.legalMoves.forEach(move => map[key][move] = 1)\r\n    }\r\n\r\n    // Get list of best moves. This setup allows for adjustment from winning.\r\n    const moves = map[key];\r\n    const highestWeight = moves.reduce((a, b) => Math.max(a, b));\r\n\r\n    const usefulMoves = Object.keys(moves).filter(move => moves[move] === highestWeight);\r\n    const randomMove = sample(usefulMoves);\r\n\r\n    // Store the move for this game\r\n    this.setState({\r\n      history: [...history, { state: state, move: randomMove, turn: props.turn }],\r\n      decisionMap: map\r\n    }, () => props.registerMove(randomMove));\r\n\r\n  }\r\n\r\n  resolveEnd(type) {\r\n    // translated from current tic-tac-toe endcon, will need to be refactored\r\n    const translation = {'X': 'L', 'O': 'W'}\r\n    const endType = translation[type];\r\n    if (endType === 'L') {\r\n      this.resolveLoss();\r\n    } else if (endType === 'W') {\r\n      this.resolveWin();\r\n    } else {\r\n      this.resolveTie();\r\n    }\r\n  }\r\n\r\n  resolveWin() {\r\n    const history = this.state.history.slice();\r\n    const map = {...this.state.decisionMap};\r\n    history.forEach((o) => {\r\n      map[JSON.stringify(o.state)][o.move]++;\r\n    });\r\n\r\n    this.setState({\r\n      decisionMap: map\r\n    })\r\n  }\r\n\r\n  resolveTie() {\r\n    // currently, do nothing\r\n  }\r\n\r\n  resolveLoss() {\r\n    // Set weight of last move used to 0\r\n    const map = {...this.state.decisionMap};\r\n    const history = this.state.history.slice();\r\n    let lastMove, key;\r\n    do {\r\n      lastMove = history.pop();\r\n      key = JSON.stringify(lastMove.state);\r\n      map[key][lastMove.move] = 0;\r\n    } while (map[key].every(weight => !weight));\r\n\r\n    this.setState({\r\n      decisionMap: map\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='machine'>\r\n        <div className='machine-info'>\r\n          <h1>Hi, I'm a machine!</h1>\r\n          As you play, I'll get better at this game.\r\n          Below, you can see the choices I'm making each time you make a move.\r\n          The numbers represent which moves are the best to make. \r\n          I'll always pick the highest number from the list.\r\n        </div>\r\n        <StateTable states={this.state.decisionMap} />\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\n\r\nexport default function Square(props) {\r\n  const style = props.position % 2 \r\n  ? 'even-square-' + props.size \r\n  : 'odd-square-' + props.size;\r\n  \r\n  return (\r\n    <div className={style} onClick={props.onClick}>\r\n      {props.value}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport Square from './Square';\r\nimport { chunk } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Board extends React.Component {\r\n\r\n  static propTypes = {\r\n    squares: PropTypes.array.isRequired,\r\n    onClick: PropTypes.func,\r\n    size: PropTypes.string\r\n  }\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n    size: 'small'\r\n  }\r\n  \r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        position={i}\r\n        size={this.props.size}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const squares = this.props.squares.map((square, i) => this.renderSquare(i));\r\n    const rows = chunk(squares, 3).map((row, i) => <div key={i} className=\"board-row\">{row}</div>);\r\n\r\n    return (\r\n      <div className=\"game-board\">\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default function WeightTable(props) {\r\n  const headers = [];\r\n  const bodies = [];\r\n\r\n  props.moves.forEach((weight, move) => {\r\n    headers.push(\r\n      <th key={10 - move}>({Math.floor(move / 3)},{move % 3})</th>\r\n    );\r\n    bodies.push(\r\n      <td key={move} className={weight ? 'alert-success' : 'alert-danger'}>{weight}</td>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <table class='weight-table'>\r\n      <thead class='thead-light'><tr>{headers}</tr></thead>\r\n      <tbody><tr>{bodies}</tr></tbody>\r\n    </table>\r\n  )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./styles/index.scss\";\r\nimport {Game} from './components'\r\n// ========================================\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}