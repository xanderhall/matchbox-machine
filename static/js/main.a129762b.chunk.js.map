{"version":3,"sources":["components/Square.js","components/Board.js","components/StepButton.js","components/InfoPanel.js","bot/Machine.js","components/Game.js","components/index.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","key","squares","_this2","map","square","renderSquare","rows","chunk","row","React","Component","StepButton","jumpTo","step","InfoPanel","history","components_StepButton","status","MatchboxMachine","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","stateMap","Map","gameState","stateString","JSON","stringify","slice","turn","has","weightMap","legalMoves","forEach","move","set","availableMoves","get","usefulMoves","weight","push","randomMove","sample","registerMove","setState","endCondition","resolveLoss","resolveWin","resolveTie","lastMove","pop","every","moves","resolveEnd","shouldRegisterMove","resolveMove","renderMatchboxes","PureComponent","getLegalMoves","mark","determineWinningState","some","line","_line","slicedToArray","b","c","Game","handleClick","bind","assertThisInitialized","Array","fill","length","player","concat","toConsumableArray","current","Board_Board","Machine_MatchboxMachine","ReactDOM","render","components","document","getElementById"],"mappings":"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","file":"static/js/main.a129762b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Square (props) {\r\n  return (\r\n    <td className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </td>\r\n  )\r\n}","import React from 'react';\r\nimport Square from './Square';\r\nimport { chunk } from 'lodash';\r\n\r\nexport default class Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const squares = this.props.squares.map((square, i) => this.renderSquare(i));\r\n    const rows = chunk(squares, 3).map((row, i) =>\r\n      <tr key={i} className=\"board-row\">{row}</tr>\r\n    );\r\n\r\n    return (\r\n      <table className=\"game-board\">\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}","import React from 'react'\r\n\r\nconst StepButton = (props) => {\r\n  return (\r\n    <li>\r\n      <button onClick={() => props.jumpTo()}>\r\n        {props.step > 0 ? \"Go to move \" + props.step : \"Go to game start\"}\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default StepButton\r\n","import React from 'react';\r\nimport StepButton from './StepButton';\r\n\r\nexport default function InfoPanel(props) {\r\n  const moveList = props.history.map((step, i) =>\r\n    <StepButton\r\n      key={i}\r\n      step={i}\r\n      jumpTo={() => props.jumpTo(i)}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className=\"game-info\">\r\n      <div>{props.status}</div>\r\n      <ol>\r\n        <StepButton step={0} jumpTo={() => props.jumpTo(0)}></StepButton>\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport sample from 'lodash/sample';\r\n\r\nexport default class MatchboxMachine extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stateMap: new Map(),\r\n      history: [],\r\n    }\r\n  }\r\n\r\n  static propTypes = {\r\n    gameState: PropTypes.object.isRequired,\r\n    registerMove: PropTypes.func.isRequired,\r\n    shouldRegisterMove: PropTypes.bool,\r\n    legalMoves: PropTypes.array,\r\n    endCondition: PropTypes.string\r\n  }\r\n\r\n  resolveMove() {\r\n    const state = this.props.gameState;\r\n    const stateString = JSON.stringify(state);\r\n    const map = this.state.stateMap;\r\n    const history = this.state.history.slice(0, this.props.turn + 1);\r\n\r\n    // Check if current game state has previously been evaluated\r\n    if (!map.has(stateString)) {\r\n      const weightMap = [];\r\n      this.props.legalMoves.forEach((move) => weightMap[move] = 1);\r\n      map.set(stateString, weightMap);\r\n    }\r\n\r\n    // Get list of available moves that haven't been 'marked off'\r\n    const availableMoves = map.get(stateString);\r\n    const usefulMoves = [];\r\n    availableMoves.forEach((weight, move) => {\r\n      if (weight > 0) usefulMoves.push(move);\r\n    })\r\n    const randomMove = sample(usefulMoves);\r\n\r\n    // Register the move with the game\r\n    this.props.registerMove(randomMove);\r\n\r\n    // Store the moves for this game\r\n    history[this.props.turn] = { state: state, move: randomMove };\r\n    this.setState({\r\n      history: history,\r\n    });\r\n  }\r\n\r\n  resolveEnd() {\r\n    if (this.props.endCondition === 'X') {\r\n      this.resolveLoss();\r\n    } else if (this.props.endCondition === 'O') {\r\n      this.resolveWin();\r\n    } else {\r\n      this.resolveTie();\r\n    }\r\n  }\r\n\r\n  resolveWin() {\r\n    // currently, do nothing\r\n  }\r\n\r\n  resolveTie() {\r\n    // currently, do nothing\r\n  }\r\n\r\n  resolveLoss() {\r\n    // Set weight of last move used to 0\r\n    const lastMove = this.state.history.slice().pop();\r\n    const map = this.state.stateMap;\r\n    const stateString = JSON.stringify(lastMove.state);\r\n    const availableMoves = map.get(stateString).slice();\r\n    availableMoves[lastMove.move] = 0;\r\n    map.set(stateString, availableMoves);\r\n    if (availableMoves.every(weight => !weight)) {\r\n      this.resolveLoss();\r\n    }\r\n  }\r\n\r\n  renderMatchboxes() {\r\n    const rows = [];\r\n    this.state.stateMap.forEach((moves, stateString) => {\r\n      rows.push(\r\n        <tr key={stateString}>\r\n          <td>For the state given by {stateString}, the bot has these weights:</td>\r\n          {moves.map((weight, move) => <td key={move}>{move}: {weight}</td>)}\r\n        </tr>\r\n      );\r\n    });\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.endCondition) {\r\n      this.resolveEnd();\r\n    } else if (this.props.shouldRegisterMove) {\r\n      this.resolveMove();\r\n    }\r\n\r\n    return (\r\n      <div className='machine'>\r\n        <div className='machine-info'>\r\n          <h1>Hi, I'm a machine!</h1>\r\n        </div>\r\n        <table className='matchboxes'>\r\n          {this.renderMatchboxes()}\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport InfoPanel from './InfoPanel';\r\nimport MatchboxMachine from '../bot/Machine';\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        lastMove: null,\r\n      }],\r\n      turn: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.turn + 1);\r\n    const squares = history[history.length - 1].squares.slice();\r\n\r\n    if (determineWinningState(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    const player = (this.state.turn % 2) === 0 ? 'X' : 'O';\r\n    squares[i] = player;\r\n    this.setState({\r\n      history: [...history, { squares: squares, lastMove: { square: i, player: player } }],\r\n      turn: history.length,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.turn];\r\n    const player = ((this.state.turn % 2) === 0 ? 'X' : 'O');\r\n    const isGameOver = determineWinningState(current.squares);\r\n\r\n    let status = 'Next player: ' + player;\r\n    let endCondition;\r\n    if (isGameOver) {\r\n      endCondition = current.lastMove.player;\r\n      status = 'Winner: ' + endCondition;\r\n    } else if (this.state.turn === 9) {\r\n      endCondition = 'T';\r\n      status = 'Tie';\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={this.handleClick}\r\n        />\r\n        <InfoPanel\r\n          status={status}\r\n          history={history}\r\n          jumpTo={(i) => this.setState({ turn: i })}\r\n        />\r\n        <MatchboxMachine\r\n          gameState={current}\r\n          registerMove={this.handleClick}\r\n          shouldRegisterMove={player === 'O' && !endCondition}\r\n          legalMoves={getLegalMoves(current.squares)}\r\n          endCondition={endCondition}\r\n          turn={this.state.turn}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getLegalMoves(squares) {\r\n  const legalMoves = [];\r\n  squares.forEach((mark, i) => {\r\n    if (!mark) legalMoves.push(i);\r\n  });\r\n  return legalMoves;\r\n}\r\n\r\nfunction determineWinningState(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  return lines.some((line) => {\r\n    const [a, b, c] = line;\r\n    return squares[a] && squares[a] === squares[b] && squares[a] === squares[c];\r\n  });\r\n}","import Game from './Game'\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport Game from './components'\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}