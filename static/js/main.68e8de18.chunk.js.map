{"version":3,"sources":["components/Square.js","components/Board.js","components/StepButton.js","components/InfoPanel.js","bot/StateTable.js","bot/Machine.js","components/Game.js","components/index.js","index.js"],"names":["Square","props","react_default","a","createElement","className","onClick","value","Board","i","_this","this","key","squares","_this2","map","square","renderSquare","rows","chunk","row","React","Component","StepButton","class","jumpTo","step","InfoPanel","status","defaultProps","StateTable","renderRows","entries","Object","states","orderBy","e","JSON","parse","filter","length","entry","_entry","slicedToArray","moves","Board_Board","renderWeightTable","headers","bodies","forEach","weight","move","push","Math","floor","MatchboxMachine","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getMachineEvaluationFunction","resolveMove","bind","assertThisInitialized","state","decisionMap","history","endCondition","resolveEnd","stringify","objectSpread","h","turn","hasOwnProperty","legalMoves","highestWeight","reduce","b","max","usefulMoves","keys","randomMove","sample","setState","concat","toConsumableArray","registerMove","type","endType","X","O","resolveLoss","resolveWin","resolveTie","slice","o","lastMove","pop","every","StateTable_StateTable","getLegalMoves","determineEndCondition","lines","line","_lines$line","c","some","Game","handleClick","Array","fill","player","evaluateMachineMove","_this3","current","Machine_MatchboxMachine","func","ReactDOM","render","components","document","getElementById"],"mappings":"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","file":"static/js/main.68e8de18.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Square (props) {\r\n  return (\r\n    <td className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </td>\r\n  )\r\n}","import React from 'react';\r\nimport Square from './Square';\r\nimport { chunk } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Board extends React.Component {\r\n\r\n  static propTypes = {\r\n    squares: PropTypes.array.isRequired,\r\n    onClick: PropTypes.func\r\n  }\r\n\r\n  static defaultProps = {\r\n    onClick: () => {},\r\n  }\r\n  \r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const squares = this.props.squares.map((square, i) => this.renderSquare(i));\r\n    const rows = chunk(squares, 3).map((row, i) => <tr key={i} className=\"board-row\">{row}</tr>);\r\n\r\n    return (\r\n      <table className=\"game-board\">\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}","import React from 'react'\r\n\r\nexport default function StepButton(props) {\r\n  return (\r\n    <button class='btn btn-primary' onClick={() => props.jumpTo(props.step)}>\r\n      {props.step > 0 ? \"Go to move \" + props.step : \"Restart game\"}\r\n    </button>\r\n  );\r\n}","import React from 'react';\r\nimport StepButton from './StepButton';\r\n\r\nexport default function InfoPanel(props) {\r\n  // const moveList = props.history.map((step, i) =>\r\n  //   <StepButton\r\n  //     key={i}\r\n  //     step={i}\r\n  //     jumpTo={() => props.jumpTo(i)}\r\n  //   />\r\n  // );\r\n\r\n  return (\r\n    <div className=\"game-info\">\r\n      <div>{props.status}</div>\r\n      <StepButton step={0} jumpTo={props.jumpTo}></StepButton>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from '../components/Board';\r\nimport { orderBy } from 'lodash';\r\n\r\nexport default class StateTable extends Component {\r\n  render() {\r\n    return (\r\n      <table class='table table-borderless' className='state-table'>\r\n        <tbody>{this.renderRows()}</tbody>\r\n      </table>\r\n    )\r\n  }\r\n\r\n  renderRows() {\r\n    const entries = Object.entries(this.props.states);\r\n    const sortedEntries = orderBy(entries, (e) => JSON.parse(e[0]).filter(square => !square).length , 'desc');\r\n\r\n    return sortedEntries.map((entry) => {\r\n      const [key, moves] = entry;\r\n      return (\r\n        <tr key={key}>\r\n          <td><Board squares={JSON.parse(key)} /></td>\r\n          <td class='h-100'>{this.renderWeightTable(moves)}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  renderWeightTable(moves) {\r\n    const headers = [];\r\n    const bodies = [];\r\n    moves.forEach((weight, move) => {\r\n      headers.push(\r\n        <th key={move}>({Math.floor(move / 3)},{move % 3})</th>\r\n      );\r\n      bodies.push(\r\n        <td key={move} className={weight ? 'alert alert-success' : 'alert alert-danger'}>{weight}</td>\r\n      )\r\n    });\r\n    return (\r\n      <table class='table table-bordered text-center'>\r\n        <thead class='thead-light'><tr>{headers}</tr></thead>\r\n        <tbody><tr>{bodies}</tr></tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n","import sample from 'lodash/sample';\r\nimport React from 'react';\r\nimport StateTable from './StateTable';\r\n\r\nexport default class MatchboxMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props.getMachineEvaluationFunction(this.resolveMove.bind(this));\r\n    this.state = {\r\n      decisionMap: {},\r\n      history: [],\r\n    }\r\n  }\r\n\r\n  resolveMove(props) {\r\n    if (props.endCondition) {\r\n      this.resolveEnd(props.endCondition);\r\n      return;\r\n    }\r\n    const state = props.state;\r\n    const key = JSON.stringify(state);\r\n    const map = {...this.state.decisionMap};\r\n    const history = this.state.history.filter(h => h.turn < props.turn);\r\n\r\n    // Check if current game state has previously been evaluated\r\n    if (!map.hasOwnProperty(key)) {\r\n      map[key] = [];\r\n      props.legalMoves.forEach(move => map[key][move] = 2)\r\n    }\r\n\r\n    // Get list of best moves. This setup allows for adjustment from winning.\r\n    const moves = map[key];\r\n    const highestWeight = moves.reduce((a, b) => Math.max(a, b));\r\n\r\n    const usefulMoves = Object.keys(moves).filter(move => moves[move] === highestWeight);\r\n    const randomMove = sample(usefulMoves);\r\n\r\n    // Store the move for this game\r\n    this.setState({\r\n      history: [...history, { state: state, move: randomMove, turn: props.turn }],\r\n      decisionMap: map\r\n    }, () => props.registerMove(randomMove));\r\n\r\n  }\r\n\r\n  resolveEnd(type) {\r\n    // translated from current tic-tac-toe endcon, will need to be refactored\r\n    const translation = {'X': 'L', 'O': 'W'}\r\n    const endType = translation[type];\r\n    if (endType === 'L') {\r\n      this.resolveLoss();\r\n    } else if (endType === 'W') {\r\n      this.resolveWin();\r\n    } else {\r\n      this.resolveTie();\r\n    }\r\n  }\r\n\r\n  resolveWin() {\r\n    const history = this.state.history.slice();\r\n    const map = {...this.state.decisionMap};\r\n    history.forEach((o) => {\r\n      map[JSON.stringify(o.state)][o.move]++;\r\n    });\r\n\r\n    this.setState({\r\n      decisionMap: map\r\n    })\r\n  }\r\n\r\n  resolveTie() {\r\n    // currently, do nothing\r\n  }\r\n\r\n  resolveLoss() {\r\n    // Set weight of last move used to 0\r\n    const map = {...this.state.decisionMap};\r\n    const history = this.state.history.slice();\r\n    let lastMove, key;\r\n    do {\r\n      lastMove = history.pop();\r\n      key = JSON.stringify(lastMove.state);\r\n      map[key][lastMove.move] = 0;\r\n    } while (map[key].every(weight => !weight));\r\n\r\n    this.setState({\r\n      decisionMap: map\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='machine'>\r\n        <div className='machine-info'>\r\n          <h1>Hi, I'm a machine!</h1>\r\n          As you play, I'll get better at this game.\r\n          Below, you can see the choices I'm making each time you make a move.\r\n        </div>\r\n        <StateTable states={this.state.decisionMap} />\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport InfoPanel from './InfoPanel';\r\nimport MatchboxMachine from '../bot/Machine';\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        lastMove: null,\r\n      }],\r\n      turn: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.turn + 1);\r\n    const squares = history[history.length - 1].squares.slice();\r\n\r\n    if (determineEndCondition(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    const player = (this.state.turn % 2) === 0 ? 'X' : 'O';\r\n    squares[i] = player;\r\n    this.setState({\r\n      history: [...history, { squares: squares, lastMove: { square: i, player: player } }],\r\n      turn: history.length,\r\n    }, () => {\r\n      const endCondition = determineEndCondition(squares);\r\n      if (endCondition || player === 'X') {\r\n        this.state.evaluateMachineMove({\r\n          state: squares,\r\n          turn: this.state.turn,\r\n          legalMoves: getLegalMoves(squares),\r\n          endCondition: endCondition,\r\n          registerMove: this.handleClick\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history.slice();\r\n    const current = history[this.state.turn];\r\n    const player = ((this.state.turn % 2) === 0 ? 'X' : 'O');\r\n    const endCondition = determineEndCondition(current.squares);\r\n\r\n    let status;\r\n    if (endCondition === 'X' || endCondition === 'O') {\r\n      status = 'Winner: ' + endCondition;\r\n    } else if (endCondition === 'T') {\r\n      status = 'Tie';\r\n    } else {\r\n      status = 'Next player: ' + player;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={this.handleClick}\r\n        />\r\n        <InfoPanel\r\n          status={status}\r\n          history={history}\r\n          jumpTo={(i) => this.setState({ turn: i })}\r\n        />\r\n        <MatchboxMachine\r\n          getMachineEvaluationFunction={(func) => this.setState({ evaluateMachineMove: func })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getLegalMoves(squares) {\r\n  return Object.keys(squares).filter(i => !squares[i]);\r\n}\r\n\r\nfunction determineEndCondition(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (const line in lines) {\r\n    const [a, b, c] = lines[line];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  if (!squares.some(square => !square)) {\r\n    return 'T';\r\n  }\r\n  return false;\r\n}","import Game from './Game'\r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Game from './components'\r\n// ========================================\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}